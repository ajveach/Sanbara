/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	var _GameManager = __webpack_require__(1);
	
	var _sanbara = __webpack_require__(7);
	
	var _sanbara2 = _interopRequireDefault(_sanbara);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var GAME = new _GameManager.GameManager();
	
	// Load all scenes
	var _iteratorNormalCompletion = true;
	var _didIteratorError = false;
	var _iteratorError = undefined;
	
	try {
	  for (var _iterator = _sanbara2.default.scenes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	    var scene = _step.value;
	
	    GAME.addScene(scene);
	  }
	
	  // Load all systems
	} catch (err) {
	  _didIteratorError = true;
	  _iteratorError = err;
	} finally {
	  try {
	    if (!_iteratorNormalCompletion && _iterator.return) {
	      _iterator.return();
	    }
	  } finally {
	    if (_didIteratorError) {
	      throw _iteratorError;
	    }
	  }
	}
	
	var _iteratorNormalCompletion2 = true;
	var _didIteratorError2 = false;
	var _iteratorError2 = undefined;
	
	try {
	  for (var _iterator2 = _sanbara2.default.systems[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	    var system = _step2.value;
	
	    GAME.addSystem(system);
	  }
	} catch (err) {
	  _didIteratorError2 = true;
	  _iteratorError2 = err;
	} finally {
	  try {
	    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	      _iterator2.return();
	    }
	  } finally {
	    if (_didIteratorError2) {
	      throw _iteratorError2;
	    }
	  }
	}
	
	GAME.build(_sanbara2.default.parentElement);
	
	GAME.start();

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GameManager = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _SanbaraBase2 = __webpack_require__(2);
	
	var _Scene = __webpack_require__(3);
	
	var _System = __webpack_require__(4);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * GameManager Class
	 * Singleton automatically created by Sanbara to manage game states, scenes, and systems
	 */
	var GameManager = exports.GameManager = function (_SanbaraBase) {
	  _inherits(GameManager, _SanbaraBase);
	
	  function GameManager() {
	    _classCallCheck(this, GameManager);
	
	    var _this = _possibleConstructorReturn(this, (GameManager.__proto__ || Object.getPrototypeOf(GameManager)).call(this));
	
	    _this._scenes = {};
	    // Indexed array of scene names to keep the order defined in sanbara.config.js
	    _this._sceneIndex = [];
	    _this._systems = {};
	
	    _this._currentScene = null;
	    return _this;
	  }
	
	  _createClass(GameManager, [{
	    key: "addScene",
	    value: function addScene(scene, index) {
	      if (!scene instanceof _Scene.Scene) {
	        throw new Error("The object provided is not a valid scene");
	      }
	
	      if (!scene.name) {
	        throw new Error("A scene cannot be added to the game manager without first having a name");
	      }
	
	      this._scenes[scene.name] = scene;
	      this._sceneIndex.push(scene.name);
	    }
	  }, {
	    key: "addSystem",
	    value: function addSystem(system) {
	      if (!system instanceof _System.System) {
	        throw new Error("The object provided is not a valid system");
	      }
	
	      if (!system.name) {
	        throw new Error("A system cannot be added to the game manager without first having a name");
	      }
	
	      this._systems[system.name] = system;
	    }
	  }, {
	    key: "build",
	    value: function build(parentElementID) {
	      var parentElement = document.body;
	      if (parentElementID) {
	        parentElement = document.getElementById(parentElementID);
	
	        if (!parentElement) {
	          throw new Error("The parent element in sanbara.config.js must be a valid DOM element ID");
	        }
	      }
	
	      // Create canvas element
	      this._canvas = document.createElement("canvas");
	      this._canvas.id = "Sanbara";
	      parentElement.appendChild(this._canvas);
	    }
	  }, {
	    key: "start",
	    value: function start() {
	      if (this._sceneIndex.length === 0) {
	        throw new Error("Cannot start game without any scenes");
	      }
	
	      this.loadScene(0);
	    }
	  }, {
	    key: "loadScene",
	    value: function loadScene(sceneIdentifier) {
	      // Unload current scene
	      if (this.currentScene) {}
	
	      // Find scene by name or array index
	      var newScene = null;
	      if (typeof sceneIdentifier === "number") {
	        if (!this._sceneIndex[sceneIdentifier]) {
	          throw new Error("No scene found at index " + sceneIdentifier);
	        }
	
	        // load by array index
	        var newSceneName = this._sceneIndex[sceneIdentifier];
	        newScene = new this._scenes[newSceneName]();
	        if (!newScene instanceof _Scene.Scene) {
	          throw new Error("The scene at index " + 0 + " cannot be loaded because it is not an instance of the Scene class");
	        }
	      } else if (typeof sceneIdentifier === "string") {
	        if (!this._scenes[sceneIdentifier]) {
	          throw new Error("No scene found with the name " + sceneIdentifier);
	        }
	
	        // load by name
	        newScene = new this._scenes[sceneIdentifier]();
	        if (!newScene instanceof _Scene.Scene) {
	          throw new Error("The scene with name " + sceneIdentifier + " cannot be loaded because it is not an instance of the Scene class");
	        }
	      } else {
	        throw new Error("A numerical index or name string must be provided to identify the scene to load");
	      }
	
	      newScene.setGameManager(this);
	      this._currentScene = newScene;
	      this._currentScene.load();
	    }
	  }, {
	    key: "getSystem",
	    value: function getSystem(systemName) {
	      if (!this._systems[systemName]) {
	        throw new Error("No system could be found with the name \"" + systemName + "\"");
	      }
	
	      // Some systems are singletons, but this can't be determined for a system until an instance has been created
	      // Check if the system is an object already. If so, it is an instance and a reference to the existing object should be passed
	      if (this._systems[systemName] instanceof _System.System) {
	        return this._systems[systemName];
	      } else {
	        // Create an instance of the system
	        var systemInstance = new this._systems[systemName]();
	
	        // Check to see if this should be a singleton. If so, override the function with the instanced object in the systems list
	        if (systemInstance.singleton) {
	          this._systems[systemName] = systemInstance;
	        }
	
	        return systemInstance;
	      }
	    }
	  }, {
	    key: "scenes",
	    get: function get() {
	      return this._scenes;
	    }
	  }, {
	    key: "currentScene",
	    get: function get() {
	      return this._currentScene;
	    }
	  }]);

	  return GameManager;
	}(_SanbaraBase2.SanbaraBase);

/***/ },
/* 2 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var SanbaraBase = exports.SanbaraBase = function () {
	  _createClass(SanbaraBase, [{
	    key: "name",
	
	    // Name value
	    get: function get() {
	      return this._name;
	    },
	    set: function set(val) {
	      if (typeof val !== "string") {
	        throw new Error("This value must be of type string");
	      }
	
	      this._name = val;
	    }
	  }]);
	
	  function SanbaraBase() {
	    _classCallCheck(this, SanbaraBase);
	
	    this._name = this.constructor.name;
	  }
	
	  return SanbaraBase;
	}();

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Scene = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _SanbaraBase2 = __webpack_require__(2);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Scene = exports.Scene = function (_SanbaraBase) {
	  _inherits(Scene, _SanbaraBase);
	
	  function Scene() {
	    _classCallCheck(this, Scene);
	
	    var _this = _possibleConstructorReturn(this, (Scene.__proto__ || Object.getPrototypeOf(Scene)).call(this));
	
	    _this._systems = {};
	    return _this;
	  }
	
	  _createClass(Scene, [{
	    key: "setGameManager",
	    value: function setGameManager(value) {
	      this._gameManager = value;
	    }
	  }, {
	    key: "addSystem",
	    value: function addSystem(systemName) {
	      // Find the registered system in the Game Manager
	      this._systems[systemName] = this._gameManager.getSystem(systemName);
	      console.log(this);
	    }
	  }, {
	    key: "load",
	    value: function load() {}
	  }]);

	  return Scene;
	}(_SanbaraBase2.SanbaraBase);

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.System = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _SanbaraBase2 = __webpack_require__(2);
	
	var _Controller = __webpack_require__(5);
	
	var _Model = __webpack_require__(6);
	
	var _View = __webpack_require__(12);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var System = exports.System = function (_SanbaraBase) {
	  _inherits(System, _SanbaraBase);
	
	  function System() {
	    _classCallCheck(this, System);
	
	    var _this = _possibleConstructorReturn(this, (System.__proto__ || Object.getPrototypeOf(System)).call(this));
	
	    _this._controllers = {};
	    _this._models = {};
	    _this._views = {};
	
	    _this.singleton = false;
	    return _this;
	  }
	
	  _createClass(System, [{
	    key: "onSceneLoad",
	    value: function onSceneLoad(scene) {}
	  }, {
	    key: "addController",
	    value: function addController(controller) {
	      if (!controller instanceof _Controller.Controller) {
	        throw new Error("The object provided is not a valid Controller");
	      }
	
	      if (!controller.name) {
	        throw new Error("A controller cannot be added to a system without first having a name");
	      }
	
	      this._controllers[controller.name] = controller;
	      controller.onAddedToSystem(this);
	    }
	  }, {
	    key: "addModel",
	    value: function addModel(model) {
	      if (!model instanceof _Model.Model) {
	        throw new Error("The object provided is not a valid Model");
	      }
	
	      if (!model.name) {
	        throw new Error("A model cannot be added to a system without first having a name");
	      }
	
	      this._models[model.name] = model;
	      model.onAddedToSystem(this);
	    }
	  }, {
	    key: "addView",
	    value: function addView(view) {
	      if (!view instanceof _View.View) {
	        throw new Error("The object provided is not a valid View");
	      }
	
	      if (!view.name) {
	        throw new Error("A view cannot be added to a system without first having a name");
	      }
	
	      this._views[view.name] = view;
	      view.onAddedToSystem(this);
	    }
	  }, {
	    key: "controllers",
	    get: function get() {
	      return this._controllers;
	    }
	  }, {
	    key: "models",
	    get: function get() {
	      return this._models;
	    }
	  }]);

	  return System;
	}(_SanbaraBase2.SanbaraBase);

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Controller = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _SanbaraBase2 = __webpack_require__(2);
	
	var _Model = __webpack_require__(6);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Controller = exports.Controller = function (_SanbaraBase) {
	  _inherits(Controller, _SanbaraBase);
	
	  function Controller() {
	    _classCallCheck(this, Controller);
	
	    return _possibleConstructorReturn(this, (Controller.__proto__ || Object.getPrototypeOf(Controller)).call(this));
	  }
	
	  _createClass(Controller, [{
	    key: "onAddedToSystem",
	    value: function onAddedToSystem(system) {
	      this._system = system;
	    }
	  }]);

	  return Controller;
	}(_SanbaraBase2.SanbaraBase);

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.Model = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _SanbaraBase2 = __webpack_require__(2);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Model = exports.Model = function (_SanbaraBase) {
	  _inherits(Model, _SanbaraBase);
	
	  function Model() {
	    _classCallCheck(this, Model);
	
	    return _possibleConstructorReturn(this, (Model.__proto__ || Object.getPrototypeOf(Model)).call(this));
	  }
	
	  _createClass(Model, [{
	    key: "onAddedToSystem",
	    value: function onAddedToSystem(system) {
	      this._system = system;
	    }
	  }]);

	  return Model;
	}(_SanbaraBase2.SanbaraBase);

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _MainMenu = __webpack_require__(8);
	
	var _Timer = __webpack_require__(9);
	
	exports.default = {
	  parentElement: "SanbaraContainer",
	  scenes: [_MainMenu.MainMenu],
	  systems: [_Timer.TimerSystem]
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.MainMenu = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Scene2 = __webpack_require__(3);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var MainMenu = exports.MainMenu = function (_Scene) {
	  _inherits(MainMenu, _Scene);
	
	  function MainMenu() {
	    _classCallCheck(this, MainMenu);
	
	    return _possibleConstructorReturn(this, (MainMenu.__proto__ || Object.getPrototypeOf(MainMenu)).call(this));
	  }
	
	  _createClass(MainMenu, [{
	    key: "load",
	    value: function load() {
	      this.addSystem("TimerSystem");
	    }
	  }]);

	  return MainMenu;
	}(_Scene2.Scene);

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.TimerSystem = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _System2 = __webpack_require__(4);
	
	var _GameTime = __webpack_require__(10);
	
	var _GameTime2 = __webpack_require__(11);
	
	var _GameTime3 = __webpack_require__(13);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var TimerSystem = exports.TimerSystem = function (_System) {
	  _inherits(TimerSystem, _System);
	
	  function TimerSystem() {
	    _classCallCheck(this, TimerSystem);
	
	    var _this = _possibleConstructorReturn(this, (TimerSystem.__proto__ || Object.getPrototypeOf(TimerSystem)).call(this));
	
	    _this.addController(new _GameTime.GameTimeController());
	    _this.addModel(new _GameTime2.GameTimeModel());
	    _this.addView(new _GameTime3.GameTimeView());
	    return _this;
	  }
	
	  _createClass(TimerSystem, [{
	    key: "onSceneLoad",
	    value: function onSceneLoad() {
	      _get(TimerSystem.prototype.__proto__ || Object.getPrototypeOf(TimerSystem.prototype), "onSceneLoad", this).call(this);
	    }
	  }]);

	  return TimerSystem;
	}(_System2.System);

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GameTimeController = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _Controller2 = __webpack_require__(5);
	
	var _GameTime = __webpack_require__(11);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var GameTimeController = exports.GameTimeController = function (_Controller) {
	  _inherits(GameTimeController, _Controller);
	
	  function GameTimeController() {
	    _classCallCheck(this, GameTimeController);
	
	    return _possibleConstructorReturn(this, (GameTimeController.__proto__ || Object.getPrototypeOf(GameTimeController)).call(this));
	  }
	
	  _createClass(GameTimeController, [{
	    key: "onAddedToSystem",
	    value: function onAddedToSystem(system) {
	      _get(GameTimeController.prototype.__proto__ || Object.getPrototypeOf(GameTimeController.prototype), "onAddedToSystem", this).call(this, system);
	    }
	  }]);

	  return GameTimeController;
	}(_Controller2.Controller);

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GameTimeModel = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Model2 = __webpack_require__(6);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var GameTimeModel = exports.GameTimeModel = function (_Model) {
	  _inherits(GameTimeModel, _Model);
	
	  function GameTimeModel() {
	    _classCallCheck(this, GameTimeModel);
	
	    var _this = _possibleConstructorReturn(this, (GameTimeModel.__proto__ || Object.getPrototypeOf(GameTimeModel)).call(this));
	
	    _this.time = 0;
	    return _this;
	  }
	
	  _createClass(GameTimeModel, [{
	    key: "time",
	    get: function get() {
	      return this._time;
	    },
	    set: function set(val) {
	      this._time = val;
	    }
	  }]);

	  return GameTimeModel;
	}(_Model2.Model);

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.View = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _SanbaraBase2 = __webpack_require__(2);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var View = exports.View = function (_SanbaraBase) {
	  _inherits(View, _SanbaraBase);
	
	  function View() {
	    _classCallCheck(this, View);
	
	    return _possibleConstructorReturn(this, (View.__proto__ || Object.getPrototypeOf(View)).call(this));
	  }
	
	  _createClass(View, [{
	    key: "onAddedToSystem",
	    value: function onAddedToSystem(system) {
	      this._system = system;
	    }
	  }]);

	  return View;
	}(_SanbaraBase2.SanbaraBase);

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.GameTimeView = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _View2 = __webpack_require__(12);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var GameTimeView = exports.GameTimeView = function (_View) {
	  _inherits(GameTimeView, _View);
	
	  function GameTimeView() {
	    _classCallCheck(this, GameTimeView);
	
	    return _possibleConstructorReturn(this, (GameTimeView.__proto__ || Object.getPrototypeOf(GameTimeView)).call(this));
	  }
	
	  _createClass(GameTimeView, [{
	    key: "onAddedToSystem",
	    value: function onAddedToSystem(system) {
	      this._system = system;
	    }
	  }]);

	  return GameTimeView;
	}(_View2.View);

/***/ }
/******/ ]);
//# sourceMappingURL=build.min.js.map